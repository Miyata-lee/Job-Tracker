name: Deploy JobTracker

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobtracker
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::107411014674:role/github-jobtracker-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: environment/${{ env.ENVIRONMENT }}
        run: terraform init

      - name: Terraform Apply
        working-directory: environment/${{ env.ENVIRONMENT }}
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_ec2_key_pair_name: keyweb
        run: terraform apply -auto-approve

      - name: Save Terraform Outputs to files
        working-directory: environment/${{ env.ENVIRONMENT }}
        run: |
          terraform output -raw rds_endpoint > /tmp/rds_endpoint.txt
          terraform output -raw rds_database_name > /tmp/db_name.txt
          terraform output -raw alb_dns_name > /tmp/alb_dns.txt
          terraform output -raw auto_scaling_group_name > /tmp/asg_name.txt

          echo "✅ Terraform outputs saved"

      - name: Deploy RDS Database Schema
        run: |
          DB_HOST=$(cat /tmp/rds_endpoint.txt | awk -F: '{print $1}')
          DB_NAME=$(cat /tmp/db_name.txt)
          export DB_HOST DB_NAME
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          echo "Using RDS Endpoint: $DB_HOST"
          bash scripts/deploy-rds.sh

      - name: Get EC2 Instances
        id: ec2
        run: |
          ASG_NAME=$(cat /tmp/asg_name.txt)
          echo "Using ASG: $ASG_NAME"

          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query 'AutoScalingGroups[0].Instances[].InstanceId' \
            --output text)

          EC2_IPS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query 'Reservations[].Instances[].PublicIpAddress' \
            --output text)

          echo "$EC2_IPS" > /tmp/ec2_ips.txt
          echo "EC2 Hosts: $EC2_IPS"

      - name: Deploy Backend to EC2
        run: |
          DB_HOST=$(cat /tmp/rds_endpoint.txt | awk -F: '{print $1}')
          DB_NAME=$(cat /tmp/db_name.txt)
          EC2_IPS=$(cat /tmp/ec2_ips.txt)

          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem

          for ip in $EC2_IPS; do
            echo "Deploying backend on: $ip"
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts 2>/dev/null || true
            ssh -i ~/.ssh/key.pem ec2-user@$ip \
              "export DB_HOST=$DB_HOST DB_USER=${{ secrets.DB_USER }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_NAME=$DB_NAME SECRET_KEY=${{ secrets.SECRET_KEY }}; \
               bash -s" < scripts/deploy-ec2.sh
          done

      - name: Deploy Frontend to S3 & CloudFront
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: bash scripts/deploy-frontend.sh

      - name: Health Check EC2
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          for ip in $EC2_IPS; do
            echo "Checking http://$ip:5000/health"
            for i in {1..30}; do
              if curl -sf http://$ip:5000/health; then
                echo "✅ Healthy: $ip"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "❌ Health check failed for $ip"
                exit 1
              fi
              sleep 2
            done
          done

      - name: Deployment Summary
        run: |
          echo "✅ Deployment Complete"
          echo "ALB DNS: $(cat /tmp/alb_dns.txt)"
          echo "RDS: $(cat /tmp/rds_endpoint.txt | awk -F: '{print $1}')"
          echo "Timestamp: $(date)"
