name: Deploy JobTracker

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobtracker
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::107411014674:role/github-jobtracker-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd environment/${{ env.ENVIRONMENT }}
          terraform init

      - name: Terraform Plan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_ec2_key_pair_name: keyweb
        run: |
          cd environment/${{ env.ENVIRONMENT }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_ec2_key_pair_name: keyweb
        run: |
          cd environment/${{ env.ENVIRONMENT }}
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          cd environment/${{ env.ENVIRONMENT }}
          terraform output -raw rds_endpoint > /tmp/rds_endpoint.txt
          terraform output -raw rds_database_name > /tmp/db_name.txt
          terraform output -raw alb_dns_name > /tmp/alb_dns.txt
          terraform output -raw auto_scaling_group_name > /tmp/asg_name.txt
          
          echo "rds_endpoint=$(cat /tmp/rds_endpoint.txt)" >> $GITHUB_OUTPUT
          echo "db_name=$(cat /tmp/db_name.txt)" >> $GITHUB_OUTPUT
          echo "alb_dns=$(cat /tmp/alb_dns.txt)" >> $GITHUB_OUTPUT
          echo "asg_name=$(cat /tmp/asg_name.txt)" >> $GITHUB_OUTPUT

      - name: Deploy RDS Database
        env:
          DB_HOST: ${{ steps.tf_outputs.outputs.rds_endpoint }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ steps.tf_outputs.outputs.db_name }}
        run: bash scripts/deploy-rds.sh

      - name: Get EC2 Instances
        id: ec2
        env:
          ASG_NAME: ${{ steps.tf_outputs.outputs.asg_name }}
        run: |
          IPS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query 'AutoScalingGroups[0].Instances[].InstanceId' \
            --output text)
          
          EC2_IPS=$(aws ec2 describe-instances \
            --instance-ids $IPS \
            --query 'Reservations[].Instances[].PublicIpAddress' \
            --output text)
          
          echo "ips=$EC2_IPS" >> $GITHUB_OUTPUT

      - name: Deploy EC2 Application
        env:
          DB_HOST: ${{ steps.tf_outputs.outputs.rds_endpoint }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ steps.tf_outputs.outputs.db_name }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          GITHUB_REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          EC2_IPS: ${{ steps.ec2.outputs.ips }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          
          for ip in $EC2_IPS; do
            echo "Deploying to $ip..."
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts 2>/dev/null || true
            
            ssh -i ~/.ssh/key.pem ec2-user@$ip \
              "export DB_HOST=$DB_HOST && \
               export DB_USER=$DB_USER && \
               export DB_PASSWORD=$DB_PASSWORD && \
               export DB_NAME=$DB_NAME && \
               export SECRET_KEY=$SECRET_KEY && \
               curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPO/$BRANCH/scripts/deploy-ec2.sh | bash"
          done

      - name: Deploy Frontend to S3
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: bash scripts/deploy-frontend.sh

      - name: Health Check EC2
        env:
          EC2_IPS: ${{ steps.ec2.outputs.ips }}
        run: |
          for ip in $EC2_IPS; do
            echo "Health checking $ip:5000..."
            for i in {1..30}; do
              if curl -f http://$ip:5000/health 2>/dev/null; then
                echo "✓ $ip is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "✗ Health check failed on $ip"
                exit 1
              fi
              sleep 2
            done
          done

      - name: Deployment Summary
        env:
          ALB_DNS: ${{ steps.tf_outputs.outputs.alb_dns }}
          RDS_ENDPOINT: ${{ steps.tf_outputs.outputs.rds_endpoint }}
        run: |
          echo "✓ Deployment Complete!"
          echo "ALB DNS: $ALB_DNS"
          echo "RDS Endpoint: $RDS_ENDPOINT"
          echo "Timestamp: $(date)"