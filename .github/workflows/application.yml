name: Deploy Application

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobtracker
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::107411014674:role/github-jobtracker-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Get Terraform Outputs
        run: |
          cd environment/${{ env.ENVIRONMENT }}
          terraform init -no-color > /dev/null 2>&1
          terraform output -raw rds_endpoint 2>/dev/null > /tmp/rds_endpoint.txt
          terraform output -raw rds_database_name 2>/dev/null > /tmp/db_name.txt
          terraform output -raw auto_scaling_group_name 2>/dev/null > /tmp/asg_name.txt
          
          echo "RDS Endpoint: $(cat /tmp/rds_endpoint.txt)"
          echo "DB Name: $(cat /tmp/db_name.txt)"
          echo "ASG Name: $(cat /tmp/asg_name.txt)"

      - name: Get EC2 Instance IPs
        run: |
          # Use hardcoded ASG name to avoid terraform output issues
          ASG_NAME="jobtracker-asg-dev"
          
          echo "Fetching instances from ASG: $ASG_NAME"
          
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query 'AutoScalingGroups[0].Instances[].InstanceId' \
            --output text)
          
          if [ -z "$INSTANCE_IDS" ]; then
            echo "✗ No instances found in ASG"
            exit 1
          fi
          
          echo "Instance IDs: $INSTANCE_IDS"
          
          EC2_IPS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query 'Reservations[].Instances[].PublicIpAddress' \
            --output text)
          
          echo "EC2 IPs: $EC2_IPS"
          echo "$EC2_IPS" > /tmp/ec2_ips.txt

      - name: Deploy RDS + EC2 Application
        run: |
          DB_HOST=$(cat /tmp/rds_endpoint.txt | cut -d: -f1)
          DB_NAME=$(cat /tmp/db_name.txt)
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          
          for ip in $EC2_IPS; do
            echo "Deploying to $ip..."
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts 2>/dev/null || true
            
            # Deploy RDS + EC2 in one SSH session
            ssh -i ~/.ssh/key.pem ec2-user@$ip \
              "export DB_HOST=$DB_HOST && \
               export DB_USER=${{ secrets.DB_USER }} && \
               export DB_PASSWORD=${{ secrets.DB_PASSWORD }} && \
               export DB_NAME=$DB_NAME && \
               export SECRET_KEY=${{ secrets.SECRET_KEY }} && \
               curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-rds.sh | bash && \
               curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-ec2.sh | bash"
          done

      - name: Deploy Frontend to S3
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: bash scripts/deploy-frontend.sh

      - name: Health Check
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          for ip in $EC2_IPS; do
            echo "Health checking $ip:5000..."
            for i in {1..30}; do
              if curl -f http://$ip:5000/health 2>/dev/null; then
                echo "✓ $ip is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "✗ Health check failed on $ip"
                exit 1
              fi
              sleep 2
            done
          done

      - name: Deployment Complete
        run: |
          echo "✓ Application deployment completed successfully!"
          echo "RDS Endpoint: $(cat /tmp/rds_endpoint.txt)"
          echo "Timestamp: $(date)"