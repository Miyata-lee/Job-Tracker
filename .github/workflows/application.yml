name: Deploy Application

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobtracker
  ENVIRONMENT: dev
  ASG_NAME: jobtracker-asg-dev
  DB_NAME: jobtracker 
  LB_NAME: jobtracker-alb-dev
  TG_NAME: jobtracker-tg-dev         
  APP_PORT: 5000
  HEALTH_PATH: /health 
  
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::107411014674:role/github-jobtracker-role
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Get EC2 public IPs in ASG
        id: ec2
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "${ASG_NAME}" \
            --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
            --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "No InService instances in ASG"
            exit 1
          fi
          EC2_IPS=$(aws ec2 describe-instances --instance-ids $INSTANCE_IDS \
            --query 'Reservations[].Instances[?PublicIpAddress!=null].PublicIpAddress' --output text)
          if [ -z "$EC2_IPS" ]; then
            echo "Instances have no public IPs; consider SSM-based deployment"
            exit 1
          fi
          echo "$EC2_IPS" > /tmp/ec2_ips.txt

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem

      - name: Wait for SSH
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          for ip in $EC2_IPS; do
            echo "Scanning $ip..."
            for i in {1..60}; do
              ssh-keyscan -H $ip >> ~/.ssh/known_hosts 2>/dev/null && break
              [ $i -eq 60 ] && { echo "SSH not ready on $ip"; exit 1; }
              sleep 2
            done
          done

      - name: Deploy RDS and EC2
        env:
          DB_HOST: jobtracker-mysql-dev.c8xakusqg6xa.us-east-1.rds.amazonaws.com
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ env.DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          for ip in $EC2_IPS; do
            echo "Copying scripts to $ip"
            scp -i ~/.ssh/key.pem -o StrictHostKeyChecking=no scripts/deploy-rds.sh scripts/deploy-ec2.sh ec2-user@$ip:/home/ec2-user/
            echo "RDS init on $ip"
            ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
              "export DB_HOST='$DB_HOST' DB_USER='$DB_USER' DB_PASSWORD='$DB_PASSWORD' DB_NAME='$DB_NAME'; bash ~/deploy-rds.sh"
            echo "EC2 app deploy on $ip"
            ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
              "export DB_HOST='$DB_HOST' DB_USER='$DB_USER' DB_PASSWORD='$DB_PASSWORD' DB_NAME='$DB_NAME' SECRET_KEY='$SECRET_KEY' CORS_ORIGINS='${CORS_ORIGINS}'; bash ~/deploy-ec2.sh"
          done

      - name: Deploy Frontend to S3
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_REGION: ${{ env.AWS_REGION }}
          CF_ALIAS_MATCH: ${{ secrets.CF_ALIAS_MATCH }}
        run: bash scripts/deploy-frontend.sh

      - name: Verify app is running on instances
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          for ip in $EC2_IPS; do
            echo "Checking if app is running on $ip..."
            ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
              "systemctl status jobtracker || ps aux | grep -i python"
          done

      - name: Health Check via ALB
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names "${{ env.LB_NAME }}" \
            --query 'LoadBalancers[0].DNSName' --output text)
          echo "Checking ALB health: http://${ALB_DNS}${{ env.HEALTH_PATH }}"
          for i in {1..60}; do
            curl -fsS "http://${ALB_DNS}${{ env.HEALTH_PATH }}" && break
            if [ $i -eq 60 ]; then
              echo "Health check failed after 2 minutes"
              exit 1
            fi
            sleep 2
          done
          echo "âœ“ Health check passed"