name: Deploy Application

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobtracker
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::107411014674:role/github-jobtracker-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance IPs
        run: |
          ASG_NAME="jobtracker-asg-dev"
          
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query 'AutoScalingGroups[0].Instances[].InstanceId' \
            --output text)
          
          if [ -z "$INSTANCE_IDS" ]; then
            echo "✗ No instances found in ASG"
            exit 1
          fi
          
          EC2_IPS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query 'Reservations[].Instances[].PublicIpAddress' \
            --output text)
          
          echo "$EC2_IPS" > /tmp/ec2_ips.txt

      - name: Wait for SSH to be Ready
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          
          for ip in $EC2_IPS; do
            echo "Waiting for SSH on $ip..."
            for i in {1..60}; do
              if ssh-keyscan -H $ip >> /tmp/known_hosts 2>/dev/null; then
                echo "✓ SSH ready on $ip"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "✗ SSH timeout on $ip"
                exit 1
              fi
              sleep 2
            done
          done

      - name: Deploy RDS + EC2
        env:
          DB_HOST: jobtracker-mysql-dev.c8xakusqg6xa.us-east-1.rds.amazonaws.com
          DB_NAME: jobtracker_dev
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          
          for ip in $EC2_IPS; do
            echo "Deploying to $ip..."
            
            # Deploy RDS
            ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
              "export DB_HOST=$DB_HOST && \
               export DB_USER=$DB_USER && \
               export DB_PASSWORD=$DB_PASSWORD && \
               export DB_NAME=$DB_NAME && \
               curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-rds.sh | bash"
            
            # Deploy EC2
            ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ec2-user@$ip \
              "export DB_HOST=$DB_HOST && \
               export DB_USER=$DB_USER && \
               export DB_PASSWORD=$DB_PASSWORD && \
               export DB_NAME=$DB_NAME && \
               export SECRET_KEY=$SECRET_KEY && \
               curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-ec2.sh | bash"
          done

      - name: Deploy Frontend to S3
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: bash scripts/deploy-frontend.sh

      - name: Health Check
        run: |
          EC2_IPS=$(cat /tmp/ec2_ips.txt)
          
          for ip in $EC2_IPS; do
            echo "Health checking $ip:5000..."
            for i in {1..30}; do
              if curl -f http://$ip:5000/health 2>/dev/null; then
                echo "✓ $ip is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "✗ Health check failed on $ip"
                exit 1
              fi
              sleep 2
            done
          done

      - name: Deployment Complete
        run: |
          echo "✓ Application deployment completed!"
          echo "Timestamp: $(date)"